import { toHex } from "@mysten/bcs";
import { bls12_381 } from "@noble/curves/bls12-381";
import { flatten } from "./utils.js";
const _G1Element = class _G1Element {
  constructor(point) {
    this.point = point;
  }
  static generator() {
    return new _G1Element(bls12_381.G1.ProjectivePoint.BASE);
  }
  static fromBytes(bytes) {
    return new _G1Element(bls12_381.G1.ProjectivePoint.fromHex(toHex(bytes)));
  }
  toBytes() {
    return this.point.toRawBytes();
  }
  multiply(scalar) {
    return new _G1Element(this.point.multiply(scalar.scalar));
  }
  add(other) {
    return new _G1Element(this.point.add(other.point));
  }
  subtract(other) {
    return new _G1Element(this.point.subtract(other.point));
  }
  static hashToCurve(data) {
    return new _G1Element(
      bls12_381.G1.ProjectivePoint.fromAffine(bls12_381.G1.hashToCurve(data).toAffine())
    );
  }
  pairing(other) {
    return new GTElement(bls12_381.pairing(this.point, other.point));
  }
};
_G1Element.SIZE = 48;
let G1Element = _G1Element;
const _G2Element = class _G2Element {
  constructor(point) {
    this.point = point;
  }
  static generator() {
    return new _G2Element(bls12_381.G2.ProjectivePoint.BASE);
  }
  static fromBytes(bytes) {
    return new _G2Element(bls12_381.G2.ProjectivePoint.fromHex(toHex(bytes)));
  }
  toBytes() {
    return this.point.toRawBytes();
  }
  multiply(scalar) {
    return new _G2Element(this.point.multiply(scalar.scalar));
  }
  add(other) {
    return new _G2Element(this.point.add(other.point));
  }
  static hashToCurve(data) {
    return new _G2Element(
      bls12_381.G2.ProjectivePoint.fromAffine(bls12_381.G2.hashToCurve(data).toAffine())
    );
  }
  equals(other) {
    return this.point.equals(other.point);
  }
};
_G2Element.SIZE = 96;
let G2Element = _G2Element;
const _GTElement = class _GTElement {
  constructor(element) {
    this.element = element;
  }
  toBytes() {
    const P = [0, 3, 1, 4, 2, 5];
    const PAIR_SIZE = _GTElement.SIZE / P.length;
    const bytes = bls12_381.fields.Fp12.toBytes(this.element);
    return flatten(P.map((p) => bytes.subarray(p * PAIR_SIZE, (p + 1) * PAIR_SIZE)));
  }
  equals(other) {
    return bls12_381.fields.Fp12.eql(this.element, other.element);
  }
};
_GTElement.SIZE = 576;
let GTElement = _GTElement;
const _Scalar = class _Scalar {
  constructor(scalar) {
    this.scalar = scalar;
  }
  static random() {
    return _Scalar.fromBytes(bls12_381.utils.randomPrivateKey());
  }
  toBytes() {
    return new Uint8Array(bls12_381.fields.Fr.toBytes(this.scalar));
  }
  static fromBytes(bytes) {
    return new _Scalar(bls12_381.fields.Fr.fromBytes(bytes));
  }
  static fromNumber(num) {
    return new _Scalar(BigInt(num));
  }
};
_Scalar.SIZE = 32;
let Scalar = _Scalar;
export {
  G1Element,
  G2Element,
  GTElement,
  Scalar
};
//# sourceMappingURL=bls12381.js.map
