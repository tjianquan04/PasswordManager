export declare const IBEEncryptions: import("@mysten/bcs").BcsEnum<{
    BonehFranklinBLS12381: import("@mysten/bcs").BcsStruct<{
        nonce: import("@mysten/bcs").BcsType<Uint8Array<ArrayBufferLike>, Iterable<number>, "bytes[96]">;
        encryptedShares: import("@mysten/bcs").BcsType<Uint8Array<ArrayBufferLike>[], Iterable<Iterable<number>> & {
            length: number;
        }, string>;
        encryptedRandomness: import("@mysten/bcs").BcsType<Uint8Array<ArrayBufferLike>, Iterable<number>, "bytes[32]">;
    }, string>;
}, "IBEEncryptions">;
export declare const Ciphertext: import("@mysten/bcs").BcsEnum<{
    Aes256Gcm: import("@mysten/bcs").BcsStruct<{
        blob: import("@mysten/bcs").BcsType<number[], Iterable<number> & {
            length: number;
        }, string>;
        aad: import("@mysten/bcs").BcsType<number[] | null, (Iterable<number> & {
            length: number;
        }) | null | undefined, "Option<vector<u8>>">;
    }, string>;
    Hmac256Ctr: import("@mysten/bcs").BcsStruct<{
        blob: import("@mysten/bcs").BcsType<number[], Iterable<number> & {
            length: number;
        }, string>;
        aad: import("@mysten/bcs").BcsType<number[] | null, (Iterable<number> & {
            length: number;
        }) | null | undefined, "Option<vector<u8>>">;
        mac: import("@mysten/bcs").BcsType<Uint8Array<ArrayBufferLike>, Iterable<number>, "bytes[32]">;
    }, string>;
    Plain: import("@mysten/bcs").BcsStruct<{}, string>;
}, "Ciphertext">;
/**
 * The encrypted object format. Should be aligned with the Rust implementation.
 */
export declare const EncryptedObject: import("@mysten/bcs").BcsStruct<{
    version: import("@mysten/bcs").BcsType<number, number, "u8">;
    packageId: import("@mysten/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    id: import("@mysten/bcs").BcsType<string, string, string>;
    services: import("@mysten/bcs").BcsType<[string, number][], Iterable<readonly [string | Uint8Array<ArrayBufferLike>, number]> & {
        length: number;
    }, string>;
    threshold: import("@mysten/bcs").BcsType<number, number, "u8">;
    encryptedShares: import("@mysten/bcs").BcsEnum<{
        BonehFranklinBLS12381: import("@mysten/bcs").BcsStruct<{
            nonce: import("@mysten/bcs").BcsType<Uint8Array<ArrayBufferLike>, Iterable<number>, "bytes[96]">;
            encryptedShares: import("@mysten/bcs").BcsType<Uint8Array<ArrayBufferLike>[], Iterable<Iterable<number>> & {
                length: number;
            }, string>;
            encryptedRandomness: import("@mysten/bcs").BcsType<Uint8Array<ArrayBufferLike>, Iterable<number>, "bytes[32]">;
        }, string>;
    }, "IBEEncryptions">;
    ciphertext: import("@mysten/bcs").BcsEnum<{
        Aes256Gcm: import("@mysten/bcs").BcsStruct<{
            blob: import("@mysten/bcs").BcsType<number[], Iterable<number> & {
                length: number;
            }, string>;
            aad: import("@mysten/bcs").BcsType<number[] | null, (Iterable<number> & {
                length: number;
            }) | null | undefined, "Option<vector<u8>>">;
        }, string>;
        Hmac256Ctr: import("@mysten/bcs").BcsStruct<{
            blob: import("@mysten/bcs").BcsType<number[], Iterable<number> & {
                length: number;
            }, string>;
            aad: import("@mysten/bcs").BcsType<number[] | null, (Iterable<number> & {
                length: number;
            }) | null | undefined, "Option<vector<u8>>">;
            mac: import("@mysten/bcs").BcsType<Uint8Array<ArrayBufferLike>, Iterable<number>, "bytes[32]">;
        }, string>;
        Plain: import("@mysten/bcs").BcsStruct<{}, string>;
    }, "Ciphertext">;
}, string>;
/**
 * The Move struct for the KeyServerV1 object.
 */
export declare const KeyServerMoveV1: import("@mysten/bcs").BcsStruct<{
    name: import("@mysten/bcs").BcsType<string, string, "string">;
    url: import("@mysten/bcs").BcsType<string, string, "string">;
    keyType: import("@mysten/bcs").BcsType<number, number, "u8">;
    pk: import("@mysten/bcs").BcsType<number[], Iterable<number> & {
        length: number;
    }, string>;
}, string>;
/**
 * The Move struct for the parent object.
 */
export declare const KeyServerMove: import("@mysten/bcs").BcsStruct<{
    id: import("@mysten/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    firstVersion: import("@mysten/bcs").BcsType<string, string | number | bigint, "u64">;
    lastVersion: import("@mysten/bcs").BcsType<string, string | number | bigint, "u64">;
}, string>;
