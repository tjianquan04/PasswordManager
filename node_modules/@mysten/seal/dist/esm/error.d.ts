export declare class SealError extends Error {
}
export declare class UserError extends SealError {
}
export declare class SealAPIError extends SealError {
    #private;
    requestId?: string | undefined;
    status?: number | undefined;
    constructor(message: string, requestId?: string | undefined, status?: number | undefined);
    static assertResponse(response: Response, requestId: string): Promise<void>;
}
export declare class InvalidPTBError extends SealAPIError {
    constructor(requestId?: string, message?: string);
}
export declare class InvalidPackageError extends SealAPIError {
    constructor(requestId?: string);
}
export declare class InvalidParameterError extends SealAPIError {
    constructor(requestId?: string);
}
export declare class InvalidUserSignatureError extends SealAPIError {
    constructor(requestId?: string);
}
export declare class InvalidSessionKeySignatureError extends SealAPIError {
    constructor(requestId?: string);
}
export declare class InvalidMVRNameError extends SealAPIError {
    constructor(requestId?: string);
}
/** Server error indicating that the requested key server object id is invalid */
export declare class InvalidKeyServerObjectIdError extends SealAPIError {
    constructor(requestId?: string);
}
/** Server error indicating that the requested package id is not supported (i.e., key server is running in Permissioned mode) */
export declare class UnsupportedPackageIdError extends SealAPIError {
    constructor(requestId?: string);
}
export declare class InvalidSDKVersionError extends SealAPIError {
    constructor(requestId?: string);
}
export declare class DeprecatedSDKVersionError extends SealAPIError {
    constructor(requestId?: string);
}
/** Server error indicating that the user does not have access to one or more of the requested keys */
export declare class NoAccessError extends SealAPIError {
    constructor(requestId?: string);
}
/** Server error indicating that the session key has expired */
export declare class ExpiredSessionKeyError extends SealAPIError {
    constructor(requestId?: string);
}
/** Internal server error, caller should retry */
export declare class InternalError extends SealAPIError {
    constructor(requestId?: string);
}
/** General server errors that are not specific to the Seal API (e.g., 404 "Not Found") */
export declare class GeneralError extends SealAPIError {
}
export declare class InvalidPersonalMessageSignatureError extends UserError {
}
export declare class InvalidGetObjectError extends UserError {
}
export declare class UnsupportedFeatureError extends UserError {
}
export declare class UnsupportedNetworkError extends UserError {
}
export declare class InvalidKeyServerError extends UserError {
}
export declare class InvalidKeyServerVersionError extends UserError {
}
export declare class InvalidCiphertextError extends UserError {
}
export declare class InvalidThresholdError extends UserError {
}
export declare class InconsistentKeyServersError extends UserError {
}
export declare class DecryptionError extends UserError {
}
export declare class InvalidClientOptionsError extends UserError {
}
export declare class TooManyFailedFetchKeyRequestsError extends UserError {
}
export declare function toMajorityError(errors: Error[]): Error;
