import { fromHex } from "@mysten/bcs";
import { isValidSuiObjectId } from "@mysten/sui/utils";
import { EncryptedObject } from "./bcs.js";
import { UserError } from "./error.js";
import { BonehFranklinBLS12381Services } from "./ibe.js";
import { deriveKey, KeyPurpose } from "./kdf.js";
import { createFullId, MAX_U8 } from "./utils.js";
import { split } from "./shamir.js";
async function encrypt({
  keyServers,
  kemType,
  threshold,
  packageId,
  id,
  encryptionInput
}) {
  if (threshold <= 0 || threshold > MAX_U8 || keyServers.length < threshold || keyServers.length > MAX_U8 || !isValidSuiObjectId(packageId)) {
    throw new UserError(
      `Invalid key servers or threshold ${threshold} for ${keyServers.length} key servers for package ${packageId}`
    );
  }
  const baseKey = await encryptionInput.generateKey();
  const shares = split(baseKey, threshold, keyServers.length);
  const fullId = createFullId(packageId, id);
  const encryptedShares = encryptBatched(
    keyServers,
    kemType,
    fromHex(fullId),
    shares.map(({ share, index }) => ({
      msg: share,
      index
    })),
    baseKey,
    threshold
  );
  const demKey = deriveKey(
    KeyPurpose.DEM,
    baseKey,
    encryptedShares.BonehFranklinBLS12381.encryptedShares,
    threshold,
    keyServers.map(({ objectId }) => objectId)
  );
  const ciphertext = await encryptionInput.encrypt(demKey);
  const services = keyServers.map(({ objectId }, i) => [
    objectId,
    shares[i].index
  ]);
  return {
    encryptedObject: EncryptedObject.serialize({
      version: 0,
      packageId,
      id,
      services,
      threshold,
      encryptedShares,
      ciphertext
    }).toBytes(),
    key: demKey
  };
}
var KemType = /* @__PURE__ */ ((KemType2) => {
  KemType2[KemType2["BonehFranklinBLS12381DemCCA"] = 0] = "BonehFranklinBLS12381DemCCA";
  return KemType2;
})(KemType || {});
var DemType = /* @__PURE__ */ ((DemType2) => {
  DemType2[DemType2["AesGcm256"] = 0] = "AesGcm256";
  DemType2[DemType2["Hmac256Ctr"] = 1] = "Hmac256Ctr";
  return DemType2;
})(DemType || {});
function encryptBatched(keyServers, kemType, id, msgs, baseKey, threshold) {
  switch (kemType) {
    case 0 /* BonehFranklinBLS12381DemCCA */:
      return new BonehFranklinBLS12381Services(keyServers).encryptBatched(
        id,
        msgs,
        baseKey,
        threshold
      );
    default:
      throw new Error(`Invalid KEM type ${kemType}`);
  }
}
export {
  DemType,
  KemType,
  encrypt
};
//# sourceMappingURL=encrypt.js.map
