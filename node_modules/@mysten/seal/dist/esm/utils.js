import { fromHex, toHex } from "@mysten/bcs";
import { isValidSuiObjectId } from "@mysten/sui/utils";
import { UserError } from "./error.js";
const MAX_U8 = 255;
function xor(a, b) {
  if (a.length !== b.length) {
    throw new Error("Invalid input");
  }
  return xorUnchecked(a, b);
}
function xorUnchecked(a, b) {
  return a.map((ai, i) => ai ^ b[i]);
}
function createFullId(packageId, innerId) {
  if (!isValidSuiObjectId(packageId)) {
    throw new UserError(`Invalid package ID ${packageId}`);
  }
  const fullId = flatten([fromHex(packageId), fromHex(innerId)]);
  return toHex(fullId);
}
function flatten(arrays) {
  const length = arrays.reduce((sum, arr) => sum + arr.length, 0);
  const result = new Uint8Array(length);
  arrays.reduce((offset, array) => {
    result.set(array, offset);
    return offset + array.length;
  }, 0);
  return result;
}
function count(array, value) {
  return array.reduce((count2, item) => item === value ? count2 + 1 : count2, 0);
}
function hasDuplicates(array) {
  return new Set(array).size !== array.length;
}
function allEqual(array) {
  if (array.length === 0) {
    return true;
  }
  return array.every((item) => item === array[0]);
}
class Version {
  constructor(version) {
    const parts = version.split(".").map(Number);
    if (parts.length !== 3 || parts.some((part) => isNaN(part) || !Number.isInteger(part) || part < 0)) {
      throw new UserError(`Invalid version format: ${version}`);
    }
    this.major = parts[0];
    this.minor = parts[1];
    this.patch = parts[2];
  }
  // Compare this version with another version. True if this version is older than the other version.
  older_than(other) {
    if (this.major !== other.major) {
      return this.major < other.major;
    } else if (this.minor !== other.minor) {
      return this.minor < other.minor;
    }
    return this.patch < other.patch;
  }
}
export {
  MAX_U8,
  Version,
  allEqual,
  count,
  createFullId,
  flatten,
  hasDuplicates,
  xor,
  xorUnchecked
};
//# sourceMappingURL=utils.js.map
