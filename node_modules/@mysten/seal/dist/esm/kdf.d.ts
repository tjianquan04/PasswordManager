import { G1Element } from './bls12381.js';
import type { G2Element, GTElement } from './bls12381.js';
/**
 * Hash an id to a G1Element.
 *
 * @param id The id to hash.
 * @returns The G1Element.
 */
export declare function hashToG1(id: Uint8Array): G1Element;
/**
 * The default key derivation function.
 *
 * @returns The derived key.
 */
export declare function kdf(element: GTElement, nonce: G2Element, id: Uint8Array, objectId: string, index: number): Uint8Array;
export declare enum KeyPurpose {
    EncryptedRandomness = 0,
    DEM = 1
}
/**
 * Derive a key from a base key and a list of encrypted shares.
 *
 * @param purpose The purpose of the key.
 * @param baseKey The base key.
 * @param encryptedShares The encrypted shares.
 * @param threshold The threshold.
 * @param keyServers The object ids of the key servers.
 * @returns The derived key.
 */
export declare function deriveKey(purpose: KeyPurpose, baseKey: Uint8Array, encryptedShares: Uint8Array[], threshold: number, keyServers: string[]): Uint8Array;
