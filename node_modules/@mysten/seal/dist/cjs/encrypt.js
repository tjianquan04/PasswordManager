"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var encrypt_exports = {};
__export(encrypt_exports, {
  DemType: () => DemType,
  KemType: () => KemType,
  encrypt: () => encrypt
});
module.exports = __toCommonJS(encrypt_exports);
var import_bcs = require("@mysten/bcs");
var import_utils = require("@mysten/sui/utils");
var import_bcs2 = require("./bcs.js");
var import_error = require("./error.js");
var import_ibe = require("./ibe.js");
var import_kdf = require("./kdf.js");
var import_utils2 = require("./utils.js");
var import_shamir = require("./shamir.js");
async function encrypt({
  keyServers,
  kemType,
  threshold,
  packageId,
  id,
  encryptionInput
}) {
  if (threshold <= 0 || threshold > import_utils2.MAX_U8 || keyServers.length < threshold || keyServers.length > import_utils2.MAX_U8 || !(0, import_utils.isValidSuiObjectId)(packageId)) {
    throw new import_error.UserError(
      `Invalid key servers or threshold ${threshold} for ${keyServers.length} key servers for package ${packageId}`
    );
  }
  const baseKey = await encryptionInput.generateKey();
  const shares = (0, import_shamir.split)(baseKey, threshold, keyServers.length);
  const fullId = (0, import_utils2.createFullId)(packageId, id);
  const encryptedShares = encryptBatched(
    keyServers,
    kemType,
    (0, import_bcs.fromHex)(fullId),
    shares.map(({ share, index }) => ({
      msg: share,
      index
    })),
    baseKey,
    threshold
  );
  const demKey = (0, import_kdf.deriveKey)(
    import_kdf.KeyPurpose.DEM,
    baseKey,
    encryptedShares.BonehFranklinBLS12381.encryptedShares,
    threshold,
    keyServers.map(({ objectId }) => objectId)
  );
  const ciphertext = await encryptionInput.encrypt(demKey);
  const services = keyServers.map(({ objectId }, i) => [
    objectId,
    shares[i].index
  ]);
  return {
    encryptedObject: import_bcs2.EncryptedObject.serialize({
      version: 0,
      packageId,
      id,
      services,
      threshold,
      encryptedShares,
      ciphertext
    }).toBytes(),
    key: demKey
  };
}
var KemType = /* @__PURE__ */ ((KemType2) => {
  KemType2[KemType2["BonehFranklinBLS12381DemCCA"] = 0] = "BonehFranklinBLS12381DemCCA";
  return KemType2;
})(KemType || {});
var DemType = /* @__PURE__ */ ((DemType2) => {
  DemType2[DemType2["AesGcm256"] = 0] = "AesGcm256";
  DemType2[DemType2["Hmac256Ctr"] = 1] = "Hmac256Ctr";
  return DemType2;
})(DemType || {});
function encryptBatched(keyServers, kemType, id, msgs, baseKey, threshold) {
  switch (kemType) {
    case 0 /* BonehFranklinBLS12381DemCCA */:
      return new import_ibe.BonehFranklinBLS12381Services(keyServers).encryptBatched(
        id,
        msgs,
        baseKey,
        threshold
      );
    default:
      throw new Error(`Invalid KEM type ${kemType}`);
  }
}
//# sourceMappingURL=encrypt.js.map
