/** Maximum value for a u8 (unsigned 8-bit integer). */
export declare const MAX_U8 = 255;
export declare function xor(a: Uint8Array, b: Uint8Array): Uint8Array;
export declare function xorUnchecked(a: Uint8Array, b: Uint8Array): Uint8Array;
/**
 * Create a full ID concatenating package ID || inner ID.
 * @param packageId - The package ID.
 * @param innerId - The inner ID.
 * @returns The full ID.
 */
export declare function createFullId(packageId: string, innerId: string): string;
/**
 * Flatten an array of Uint8Arrays into a single Uint8Array.
 *
 * @param arrays - An array of Uint8Arrays to flatten.
 * @returns A single Uint8Array containing all the elements of the input arrays in the given order.
 */
export declare function flatten(arrays: Uint8Array[]): Uint8Array;
/** Count the number of occurrences of a value in an array. */
export declare function count<T>(array: T[], value: T): number;
/** Check if the array has any duplicate elements. */
export declare function hasDuplicates(array: number[]): boolean;
/** Check if all elements in the array are equal. */
export declare function allEqual(array: number[]): boolean;
/**
 * A simple class to represent a version number of the form x.y.z.
 */
export declare class Version {
    major: number;
    minor: number;
    patch: number;
    constructor(version: string);
    older_than(other: Version): boolean;
}
